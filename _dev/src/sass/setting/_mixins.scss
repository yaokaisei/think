@charset "utf-8";

// レファレンスポイントより大きい画面幅のスタイル
@mixin breakPC {
    @media screen and (min-width: $BREAK_POINT + 1px) {
        @content;
    }
}

// ブレークポイントより大きく、レファレンスポイントより小さい画面幅のスタイル
@mixin breakTAB {
    @media screen
    and (min-width: $BREAK_POINT + 1px)
    and (max-width: $CONTENTS_WIDTH) {
        @content;
    }
}

// ブレークポイント以下の画面幅のスタイル
//（※基本的にSPでだけ表示・非表示などで使用）
@mixin breakSP {
    @media screen and (max-width: $BREAK_POINT) {
        @content;
    }
}

// 指定要素直下の
// 最初の子要素に、margin-top: 0;
// 最後の子要素に、margin-bottom: 0;
@mixin resetMargin {
    & > *:first-child {
        margin-top: 0 !important;
    }
    & > *:last-child {
        margin-bottom: 0 !important;
    }
}

// 指定要素のhoverとfocus時のスタイル指定
@mixin hover {
    @include breakPC(){
        &:hover,
        &:focus {
            @content;
        }
    }
}

// コンテンツのinnerの最大幅指定と画面中央配置指定
@mixin contentWidth {
    width: 100%;
    max-width: calc(#{$CONTENTS_WIDTH} + 30px);
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;

    @include breakPC(){
        padding-right: 20px;
        padding-left: 20px;
    }
}

// bold指定
@mixin bold() {
    font-family: $FONT_FAMILY_YUGOTHIC_BOLD;
    font-weight: bold;
}

// 矢印
@mixin iconArrow($transform, $color) {
    border-top: 1px solid $color;
    border-right: 1px solid $color;
    transform: rotate($transform + deg);
}


// ドット背景
@mixin backDot {
    z-index: -1;
    background-color: transparent;
    background-image: radial-gradient(#888fa7 5%,transparent 11%);
    background-size: 13px 13px;
    opacity: .6;
}

// =============================================
// Flex display
// =============================================
@mixin flex($FD:null, $FW:null, $AI: null, $JC: null, $AC: null) {
  display: flex;
  flex-direction: $FD;
  flex-wrap: $FW;
  align-content: $AC;
  align-items: $AI;
  justify-content: $JC;
}

// =============================================
// transition プロパティ
// =============================================
@mixin transition($PROPERTY:null, $DURATION:null, $TIMING:null, $DELAY:null){
  transition:$PROPERTY $DURATION+s $TIMING $DELAY+s;
}

// =============================================
// gulp-base64-inline用 mixin
// =============================================
@mixin base64($fileName) {
    background-image: inline-image($fileName + ".png");
}
// ------------------------------------
// js-on
// ------------------------------------
@mixin js-on() {
    [data-script-enabled="true"] & {
        @content;
    }
}
